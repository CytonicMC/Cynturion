plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.8"
    id "io.github.goooler.shadow" version "8.1.8"
}

group = 'net.cytonic'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = 'cytonic-repo'
        url = 'https://repo.foxikle.dev/cytonic'
    }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    implementation 'redis.clients:jedis:5.2.0' // redis client
    implementation 'com.rabbitmq:amqp-client:5.21.0' // Message broker
    implementation 'net.cytonic:Commons:1.6.1'
    implementation 'com.mysql:mysql-connector-j:9.0.0' //mysql connector

}

tasks {
    assemble {
        dependsOn("shadowJar")
    }
    build {
        dependsOn("shadowJar")
    }
    shadowJar {
        archiveFileName.set('Cynturion.jar')
        destinationDirectory.set(file(providers.gradleProperty("velocity_dir").orElse(destinationDirectory.get().toString())))
//        relocate("redis.clients", "net.cytonic.cynturion.libs")
        relocate("com.rabbitmq", "net.cytonic.cynturion.libs")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.add("--enable-preview")

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
